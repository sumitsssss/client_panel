[{"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/App.js":"1","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/layout/navbar.jsx":"2","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/Redux/reducer/clientReducer.js":"3","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/layout/Sidebar.jsx":"4","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/client/Clients.jsx":"5","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/Redux/actions/clientActions.js":"6"},{"size":542,"mtime":1610127606106,"results":"7","hashOfConfig":"8"},{"size":951,"mtime":1610301007203,"results":"9","hashOfConfig":"8"},{"size":554,"mtime":1610452967791,"results":"10","hashOfConfig":"8"},{"size":680,"mtime":1610301251523,"results":"11","hashOfConfig":"8"},{"size":3979,"mtime":1610452672051,"results":"12","hashOfConfig":"8"},{"size":378,"mtime":1610457438441,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"158csra",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/App.js",[],"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/layout/navbar.jsx",[],"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/Redux/reducer/clientReducer.js",[],"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/layout/Sidebar.jsx",["27","28"],"/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/components/client/Clients.jsx",["29","30","31"],"import { Grid, makeStyles, withStyles, Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { firestore } from \"../../firebase\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\n// import TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport GlobalStyles from \"../../Globals.styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchClients } from \"../../Redux/actions/clientActions\";\r\n\r\n\r\nconst Clients = ({ clients, fetch_clients }) => {\r\n  const globalClass = GlobalStyles();\r\n  useEffect(()=>{\r\n    fetchClients();\r\n  },[])\r\n\r\n  // const [clients, setClients] = useState([]);\r\n  // useEffect(() => {\r\n  //   const getClients = async () => {\r\n  //     const snapShot = await firestore.collection(\"clients\").get();\r\n  //     const clients = snapShot.docs.map((doc) => ({\r\n  //       id: doc.id,\r\n  //       ...doc.data(),\r\n  //     }));\r\n  //     setClients(clients);\r\n  //   };\r\n\r\n  //   getClients();\r\n  // }, []);\r\n\r\n  // console.log(state.clients);\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 16,\r\n    },\r\n  }))(TableCell);\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 600,\r\n    },\r\n  });\r\n\r\n  console.log(clients);\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={6} className={classes.flex}>\r\n          <h2 style={{ textAlign: \"left\" }}>\r\n            <PeopleIcon /> Clients\r\n          </h2>\r\n        </Grid>\r\n        <Grid item xs={6}></Grid>\r\n      </Grid>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell>Name</StyledTableCell>\r\n              <StyledTableCell>Email</StyledTableCell>\r\n              <StyledTableCell>Balance</StyledTableCell>\r\n              <StyledTableCell></StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {clients.map((client) => {\r\n              return (\r\n                <StyledTableRow key={client.id}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\">\r\n                    {client.firstName} {client.lastName}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell>{client.email}</StyledTableCell>\r\n                  <StyledTableCell>{client.balance}</StyledTableCell>\r\n                  <StyledTableCell>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<ArrowRightAltIcon />}\r\n                    >\r\n                      <Link to=\"/clients\" className={globalClass.links}>\r\n                        Details\r\n                      </Link>\r\n                    </Button>\r\n                  </StyledTableCell>\r\n                </StyledTableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clients: state.client.clients,\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {fetchClients})(Clients);\r\n","/media/sumit/New Volume1/Web Development/#7 Days Code Sprint/Client-Panel/client_panel/src/Redux/actions/clientActions.js",[],{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":18},{"ruleId":"32","severity":1,"message":"36","line":6,"column":10,"nodeType":"34","messageId":"35","endLine":6,"endColumn":20},{"ruleId":"32","severity":1,"message":"37","line":2,"column":17,"nodeType":"34","messageId":"35","endLine":2,"endColumn":25},{"ruleId":"32","severity":1,"message":"38","line":3,"column":10,"nodeType":"34","messageId":"35","endLine":3,"endColumn":19},{"ruleId":"32","severity":1,"message":"39","line":16,"column":8,"nodeType":"34","messageId":"35","endLine":16,"endColumn":24},"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'useState' is defined but never used.","'firestore' is defined but never used.","'CircularProgress' is defined but never used."]